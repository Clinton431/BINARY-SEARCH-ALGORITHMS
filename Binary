Assume you are reading a book, and you want to read Page 747. How can you reach the page?
One way is to go through all the pages one by one till you reach 747. But this will take up a lot of our time.
What we generally do is, open a random page, and check the page number. If the current page number is less than 747, follow the same process on the right side pages. Similarly, if the current page number is greater than 747, check the left side.
 
Now, in our case, we can be a bit biased while selecting the page to open first during searching. Because we know the page numbers follow a particular order like 1, 2, 3, … and we also know the last page number. So let’s say the total number of pages is 800. So we know 747 is towards the end. So, we will open up a page towards the end of the book in the first iteration.
 
However, in real life, we do not always have this information. So picking a pivot is crucial for the search to be faster. It has been found that, the search is fastest in worst case when we choose the middle element as the pivot. This leads us to the concept of binary search.
What is Binary Search?
Binary search is a searching algorithm, that works on a monotonic sequence (increasing or decreasing) and efficiently searches for an element. 
int arr[] = {1, 1, 2, 3, 4, 5, 6, 7, 8};
We need to search for the element 7 in the array

Following is hot the binary program would execute:
1. Determine the middle element. 4 is the middle element(i.e idenx 4)
2. Now we know 7>4. and as the array is increasing, it is definately on the RHS. So we can just discard the left half and continue our search on the right half. So, the new search space we are considering is [5, 6, 7, 8]
4. The middle element is 7. As it is the same as the requested element, so we return it.

// Complexity analysis
In binary search half of the search space is rejected every iteration. So in the worst case, we will be continuing till we ar left with at least one element. So initially we start with N elements.
After the first iteration, we have n/2 elements.
After the second iteration, n/4 elements.
And so on.
N -> N/2 -> N/4 -> N/8 -> N/16 -> ..... -> 1
We can also write this as,
N -> N/2 -> N/(2^2) -> N/(2^3) -> ..... -> N/(2^k)
Where N/(2^k) = 1 and it runs for k iterations
So k = log2(N)
The overall complexity of the binary search algorithm is, log2(N) where N is the search space.

